name: Generate Package List

on:
  push:
    branches:
      - main
    paths:
      - 'packages/*.db.tar.gz'
      - 'packages/*.pkg.tar.zst'
  workflow_dispatch: {} # Optional, wenn du manuellen Start willst

jobs:
  build:
    # HIER DEN BERECHTIGUNGSBLOCK HINZUFÃœGEN!
    permissions:
      contents: write # Dies ist die entscheidende Zeile!

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # ... (der Rest des Workflows bleibt gleich) ...
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Generate package list with Python
      working-directory: packages
      run: |
        cat <<EOF > generate_list.py
        import tarfile
        import os

        db_file = 'archrepo.db.tar.gz'
        output_file = 'package_list.txt'
        packages = []

        if not os.path.exists(db_file):
            print(f"Error: Database file {db_file} not found!", file=os.sys.stderr)
            exit(1)

        try:
            with tarfile.open(db_file, 'r:gz') as tar:
                for member in tar.getmembers():
                    if '/desc' in member.name and not member.isdir():
                        try:
                            desc_content = tar.extractfile(member).read().decode('utf-8')
                            name = ""
                            version = ""
                            description = ""

                            lines = desc_content.splitlines()
                            for i, line in enumerate(lines):
                                if line == "%NAME%" and i + 1 < len(lines):
                                    name = lines[i+1]
                                elif line == "%VERSION%" and i + 1 < len(lines):
                                    version = lines[i+1]
                                elif line == "%DESC%" and i + 1 < len(lines):
                                    description = lines[i+1]
                                if name and version and description:
                                    break

                            if name and version:
                                packages.append(f"{name} {version} - {description}")
                        except Exception as e:
                            print(f"Warning: Could not process {member.name}: {e}", file=os.sys.stderr)

            packages.sort(key=lambda s: s.lower())
            with open(output_file, 'w') as f:
                for pkg_info in packages:
                    f.write(pkg_info + '\n')

            print(f"Package list generated successfully: {output_file}", file=os.sys.stderr)

        except Exception as e:
            print(f"Error processing {db_file}: {e}", file=os.sys.stderr)
            exit(1)

        EOF
        python generate_list.py
        rm generate_list.py

    - name: Push generated package list to main branch
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add packages/package_list.txt
        git commit -m "Update package list [skip ci]" || echo "No changes to package list."
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
